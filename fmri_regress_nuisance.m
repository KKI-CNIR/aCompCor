function [npref] = fmri_regress_nuisance(func_files,brain_mask_file,nuisance_file,options)
%Function to regress out nuisance vectors from resting state fMRI data
%Usage
%   fmri_regress_nuisance(func_files,brain_mask_file,nuisance_file)
%Inputs
%   func_files      - a cell array of functional file names (typically
%                     normalized and unsmoothed files)
%   brain_mask_file - a binary brain mask file
%   nuisance_file   - a mat file of nuisances generated by fmri_estimate_nuisance
%   options - a structure with fields listed in fmri_extract_nuisance.m
%Output filenames are prepended with 'ng' if options.global_signal=1, 'n' if =0

%Modified Spet 11, 2013 - prefix options corrected
%Modified July 26, 2013 - prefix options expanded
%Modified Apr 8, 2013 - prefix reflects mean signal vs pca choice for csf
%(assumed same is used for white matter)
%Modified Jan 8, 2013 MB Nebel - prefix changes based on csf_signal field
%Modified Sept 21, 2012 MB Nebel - passed nr_options as input so can change prefix based on global_signal field
%Modified Jul 2011 to be used in the fmri_preproc_toolbox
%Modified nii Suresh E Joel Aug 18, 2010 to get proper mean image added back
%Modified (v2) Suresh E Joel, July 29, 2008
%Suresh E Joel, Feb 16, 2008

%% Read functional files
disp(['Regressing Nuisances: ',fileparts(func_files{1})]);
P=strvcat(func_files);%#ok

%% Read the brain mask
brain_mask = spm_read_vols(spm_vol(brain_mask_file));
brain_mask = reshape(brain_mask, (size(brain_mask, 1)*size(brain_mask, 2)*size(brain_mask,3)), 1);

%% Read nuisance vector
load(nuisance_file);
nt = size(nui.tc,1);
ntc = [nui.tc,ones(nt,1), (0:1/nt:(1-1/nt))'];% nuisances, constant, linear
precal_inv = ntc*((ntc'*ntc)\ntc');

%% Regress nuisances and write out residuals
V = spm_vol(P);
W = single(reshape(spm_read_vols(V), V(1).dim(1)*V(1).dim(2)*V(1).dim(3), size(V,1)));
%Get mean image (along time) to add back the image
mY_time = reshape(mean(W,2), V(1).dim(1), V(1).dim(2), V(1).dim(3));
%regress and get residuals
W=transpose(W);
Y = W-precal_inv*W;
Y(:, logical(~brain_mask)) = 0;
Y = permute(reshape(Y, size(V,1), V(1).dim(1), V(1).dim(2), V(1).dim(3)), [2, 3, 4, 1]);
%Write residuals after adding mean image back
for i_time = 1:size(V,1),
    Vo= V(i_time);
    [pathname, filename, ext] = fileparts(V(i_time).fname);
    %%if GSR included
    if(isfield(options, 'global_signal') && options.global_signal==1)
        %if mean from white matter
        if(isfield(options, 'wm_signal') && options.wm_signal==1)
            %mean from csf also
            if(isfield(options,'csf_signal') && options.csf_signal==1)
                npref = 'ngmwc';
            else
                npref = 'ngmw';
            end
        %if pca on white matter signals
        elseif(isfield(options,'wm_signal') && options.wm_signal==2)
            if(isfield(options,'csf_signal') && options.csf_signal==2)
                if(isfield(options, 'csf_pca_percent'))
                    npref = strcat('ngwc', num2str(options.csf_pca_percent*100));
                else
                    npref = 'ngwc';
                end
            elseif(isfield(options, wm_pca_percent))
                npref = strcat('ngw', num2str(options.wm_pca_percent*100));
            else
                npref = 'ngw';
            end
            
        else
            npref = 'ng';
        end
    %No GSR but WM & CSF means
    elseif(isfield(options, 'wm_signal') && options.wm_signal==1)
        if(isfield(options,'csf_signal') && options.csf_signal==1)
            npref = 'nmwc';
        elseif(isfield(options,'csf_signal') && options.csf_signal==2)
            if(isfield(options, 'csf_pca_percent'))
                npref = strcat('nmwc', num2str(options.csf_pca_percent*100));
            else
                npref = 'nmwpc';
            end
        elseif(isfield(options, wm_pca_percent))
            npref = strcat('nw', num2str(options.wm_pca_percent*100));
        else
            npref = 'nmw';
        end
    %No GSR but PCs from WM & CSF
    elseif(isfield(options, 'wm_signal') && options.wm_signal==2)
        if(isfield(options,'csf_signal') && options.csf_signal==2)
            if(isfield(options, 'csf_pca_percent'))
                npref = strcat('nwc', num2str(options.csf_pca_percent*100));
            else
                npref = 'nwc';
            end
        elseif(isfield(options, wm_pca_percent))
            npref = strcat('nw', num2str(options.wm_pca_percent*100));
        else
            npref = 'nw';
        end
        %No GSR and no regressors from WM or CSF
    else
        %just motion parameters and trends
        npref = 'n';
    end
    Vo.fname = fullfile(pathname,[npref,filename,ext]);
    
    Vo.private.dat.fname = Vo.fname;
    Y(:,:,:,i_time) = Y(:,:,:,i_time) + mY_time;
    spm_write_vol(Vo, Y(:, :, :, i_time));
end;
